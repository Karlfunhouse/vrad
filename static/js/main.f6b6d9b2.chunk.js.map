{"version":3,"sources":["components/UserInfo/UserInfo.js","components/Covid19/Covid19.js","components/Header/Header.js","components/Login/Login.js","components/Area/Area.js","components/AreaContainer/AreaContainer.js","components/Listing/Listing.js","components/ListingContainer/ListingContainer.js","components/ListingInfo/ListingInfo.js","imageData.js","utilsData.js","ApiFetch/ApiFetch.js","components/App/App.js","serviceWorker.js","index.js"],"names":["UserInfo","props","username","usage","favoriteListings","logout","className","to","length","disabled","data-testid","onClick","Covid19","hide","setState","display","state","this","href","target","rel","Component","Header","Login","handleChange","e","name","value","handleSubmit","preventDefault","checkLogin","email","isComplete","htmlFor","type","placeholder","id","required","onChange","Area","area","location","about","listings","displayListings","replace","AreaContainer","areasInfo","areas","map","key","error","Listing","listing","address","listing_id","img","favorite","street","zip","src","Math","floor","random","alt","displayListing","ListingContainer","allListings","removeError","ListingInfo","images","details","baths","beds","cost_per_night","superhost","addFavoriteListing","imageData","3","8","9","11","21","27","44","56","66","77","90","92","221","310","411","555","744","3921","6135","83331","url","fetchAreas","a","areasData","fetch","response","json","forEach","response2","areaDetails","areaObject","push","console","log","fetchListings","listingsPromises","Object","entries","find","item","split","splice","join","then","Promise","all","catch","err","App","componentDidMount","listingsData","displayFavorites","userInfo","isLoggedIn","newFavoriteListings","slice","fave","index","findIndex","i","path","exact","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f6b6d9b2.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './UserInfo.css'\nimport { Link } from 'react-router-dom'\n\nconst UserInfo = (props) => {\n    const { \n      username, \n      usage,\n      favoriteListings, \n      logout \n    } = props\n    \n    return (\n      <div className='user-container'>\n        <div className='user-wrapper'>\n          <p className='user-message'>\n            Welcome {username}, we hope you find something for your \n            <span className='usage'> {usage}</span> needs. \n          </p>\n          <div className='btn-wrapper'>\n          <Link to='/favorites'>\n            <button \n              className={favoriteListings.length>0 ? 'favorite-btn' : 'no-favorite-btn'}\n              disabled={favoriteListings.length>0 ? null : 'disabled'}\n              data-testid='Favorite Button'\n            >\n              {'\\u2764'} {!favoriteListings.length? 'No Favorite Listings' : `Favorite Listings: ${favoriteListings.length}`}\n            </button>\n          </Link>\n          <button \n            className='logout-btn'\n            onClick={logout}\n          >\n            Logout\n          </button>\n          </div>\n        </div>\n      </div>\n    )\n}\n\nexport default UserInfo\n\nUserInfo.propTypes = {\n    logout: PropTypes.func.isRequired,\n    username: PropTypes.string.isRequired,\n    usage: PropTypes.string.isRequired,\n    favoriteListings: PropTypes.arrayOf(PropTypes.shape({\n      listing_id: PropTypes.number.isRequired,\n      area_id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      address: PropTypes.shape({\n        street: PropTypes.string.isRequired,\n        zip: PropTypes.number.isRequired,\n      }),\n      details: PropTypes.shape({\n        neighborhood_id: PropTypes.number.isRequired,\n        seller_source: PropTypes.string.isRequired,\n        superhost: PropTypes.bool.isRequired,\n        beds: PropTypes.number.isRequired,\n        baths: PropTypes.number.isRequired,\n        cost_per_night: PropTypes.number.isRequired,\n        features: PropTypes.arrayOf(PropTypes.string).isRequired,\n      }),\n      dev_id: PropTypes.string.isRequired,\n      area: PropTypes.string.isRequired,\n      favorite: PropTypes.bool.isRequired,\n      db_connect: PropTypes.number,\n    }).isRequired,)\n}\n ","import React, { Component } from 'react'\nimport './Covid19.css'\n\nclass Covid19 extends Component {\n    constructor() {\n        super()\n        this.state = {\n            display: 'covid19-container'\n        }\n    }\n\n    hide = () => {\n        this.setState({\n            display: 'hide'\n        })\n    }\n\n    render() {\n        return (\n            <div \n                className={this.state.display}\n                data-testid={this.state.display}\n            >\n                <p className='covid19-text'>\n                    Get the latest on our COVID-19 response and cancellation policies.\n                </p>\n                <a \n                    className='covid19-link' href='https://www.coronavirus.gov/' \n                    target='_blank'\n                    rel='noopener noreferrer'\n                >\n                    Learn more\n                </a>\n                <button className='covid19-close-btn' onClick={this.hide}>\n                    X\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Covid19\n","import React from 'react'\nimport './Header.css'\n\nconst Header = () => {\n    return (\n        <div className='header-container'>\n            <h1>Vacation Rentals Around Denver</h1>\n        </div>\n    )\n}\n\nexport default Header\n\n","import React, { Component } from 'react'\nimport './Login.css'\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      email: '',\n      username: '',\n      usage: ''\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value \n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.checkLogin(this.state)\n  }\n\n  render() {\n    const {email, username, usage} = this.state\n    const isComplete = email && username && usage ? false : true\n    return (\n      <div className='login-container'>\n          <h2 className='login-message'>Welcome! Please enter your info:</h2>\n          <form className='login-form'>\n              <div className='login-item'>\n                  <label htmlFor='username' className='input-label'>Username: </label>\n                  <input \n                    type='text' \n                    placeholder='username'\n                    id='username'\n                    name='username' \n                    required\n                    onChange={this.handleChange}\n                  />\n              </div>\n              <div className='login-item'>\n                  <label htmlFor='email' className='input-label'>Email: </label>\n                  <input \n                    type='email' \n                    placeholder='email'\n                    id='email' \n                    name='email' \n                    required\n                    onChange={this.handleChange}\n                  />\n              </div>\n              <div className='login-item'>\n                  <label htmlFor='usage'>What do you need a place for?</label>\n                  <div className='login-usage' id='usage'>\n                    <label htmlFor='business'>\n                    <input \n                        type='radio' \n                        id='business' \n                        name='usage' \n                        value='business' \n                        onClick={this.handleChange}\n                        required\n                      />\n                      Business:\n                    </label>\n                    <label htmlFor='vacation'>\n                      <input \n                        type='radio' \n                        id='vacation' \n                        name='usage' \n                        value='vacation' \n                        onClick={this.handleChange}\n                      />\n                      Vacation\n                    </label> \n                    <label htmlFor='party'>\n                      <input \n                        type='radio' \n                        id='party' \n                        name='usage' \n                        value='party' \n                        onClick={this.handleChange}\n                      />\n                      Party\n                    </label>\n                  </div>\n              </div>\n              <div className='login-item'>\n                  <button \n                    type='submit'\n                    className='login-btn' \n                    onClick={this.handleSubmit} \n                    disabled={isComplete}\n                  >LOGIN\n                  </button>\n              </div>\n        </form>\n      </div>\n    )\n  }\n}\n\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport './Area.css'\n\nconst Area = (props) => {\n    const { \n      area, \n      name, \n      location, \n      about, \n      listings\n    } = props.area\n    \n    return (\n      <section className='area-wrapper'>\n        <div className={area}>\n          <h2 className='area-area'>{area}</h2>\n        </div>\n        <div className='area-info'>\n          <h2 className='area-name'>{name}</h2>\n          <p className='area-location'>{location}</p>\n          <p className='area-about'>{about}</p>\n        </div>\n        <Link\n          onClick={() => props.displayListings(listings)}\n          to={`/areas/${area.replace(/\\s/g, '')}/listings`}\n        >\n          <button className='listings-btn'>See Listings</button>\n        </Link>\n      </section>\n    )\n}\n\nexport default Area\n\nArea.propTypes = {\n  area: PropTypes.shape({\n    about: PropTypes.string.isRequired,\n    area: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    listings: PropTypes.arrayOf(PropTypes.string).isRequired,\n    location: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    quick_search: PropTypes.string,\n    region_code: PropTypes.number,\n  }).isRequired,\n  displayListings: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './AreaContainer.css'\nimport Area from '../Area/Area'\n\nconst AreaContainer = (props) => {\n  const areasInfo = props.areas.map(area => {     \n    return <Area \n            area={area} \n            key={area.id} \n            displayListings={props.displayListings} \n        />\n    })\n    return (\n        <section>\n            <p className='error'>{props.error}</p>\n            <div className='area-container'>\n                { areasInfo }\n            </div>\n        </section>\n    )\n}\n\nexport default AreaContainer\n\nAreaContainer.propTypes = {\n    areas: PropTypes.arrayOf(PropTypes.shape({\n            about: PropTypes.string.isRequired,\n            area: PropTypes.string.isRequired,\n            id: PropTypes.number.isRequired,\n            listings: PropTypes.arrayOf(PropTypes.string),\n            location: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            quick_search: PropTypes.string,\n            region_code: PropTypes.number,\n    })).isRequired,\n    displayListings: PropTypes.func.isRequired\n}\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Listing.css'\nimport { Link } from 'react-router-dom'\n\nconst Listing = (props) => {\n    const {name, address, listing_id, img, area, favorite} = props.listing\n    const {street, zip} = address\n    return (\n        <div className='listing-wrapper'>\n          <img\n            className='listing-img'\n            src={`/images/${img[Math.floor(Math.random() * img.length)]}`}\n            alt=''\n          />\n          <h2 className={favorite ? 'listing-name-favorite' : 'listing-name'}>\n            {favorite && '\\u2764 '}\n            {name}\n            {favorite && ' \\u2764'}\n          </h2>\n          <p className='listing-address'>{street}, {zip}, Denver</p>\n         <Link \n            to = {`/areas/${area}/listings/${listing_id}`}\n            onClick={() => props.displayListing(props.listing)}>  \n            <button \n              className='listing-btn'  \n            >\n              See Details\n            </button>\n          </Link>\n        </div>\n    )\n}\n\nexport default Listing\n\nListing.propTypes = {\n  listing: PropTypes.shape({\n    listing_id: PropTypes.number.isRequired,\n    area_id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    address: PropTypes.shape({\n      street: PropTypes.string.isRequired,\n      zip: PropTypes.number.isRequired,\n    }),\n    details: PropTypes.shape({\n      neighborhood_id: PropTypes.number.isRequired,\n      seller_source: PropTypes.string.isRequired,\n      superhost: PropTypes.bool.isRequired,\n      beds: PropTypes.number.isRequired,\n      baths: PropTypes.number.isRequired,\n      cost_per_night: PropTypes.number.isRequired,\n      features: PropTypes.arrayOf(PropTypes.string).isRequired,\n    }),\n    dev_id: PropTypes.string.isRequired,\n    area: PropTypes.string.isRequired,\n    favorite: PropTypes.bool.isRequired,\n    db_connect: PropTypes.number,\n  }).isRequired,\n  displayListing: PropTypes.func.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './ListingContainer.css'\nimport Listing from '../Listing/Listing'\nimport { Link } from 'react-router-dom'\n\nconst ListingContainer = (props) => {\n  const allListings = props.listings.map(listing => {\n    return <Listing \n        listing={listing} \n        key={listing.listing_id}\n        displayListing={props.displayListing}\n      />\n  })\n    return (\n      <section>\n        <nav className='listing-container-nav'>\n          <Link to='/areas'>\n              <button className='back-areas-btn' onClick={props.removeError}>Back To Areas</button>\n          </Link>\n        </nav>\n        <p className='error'>{props.error}</p>\n        <div className='listing-container'>\n          {allListings}\n        </div>\n      </section>\n    )\n}\n\nexport default ListingContainer\n\nListingContainer.propTypes = {\n  listings: PropTypes.arrayOf(PropTypes.shape({\n    address: PropTypes.shape({\n      street: PropTypes.string.isRequired,\n      zip: PropTypes.number.isRequired,\n    }),\n    area: PropTypes.string.isRequired,\n    area_id: PropTypes.number.isRequired,\n    db_connect: PropTypes.number,\n    details: PropTypes.shape({\n      neighborhood_id: PropTypes.number.isRequired,\n      seller_source: PropTypes.string.isRequired,\n      superhost: PropTypes.bool.isRequired,\n      beds: PropTypes.number.isRequired,\n      baths: PropTypes.number.isRequired,\n      cost_per_night: PropTypes.number.isRequired,\n      features: PropTypes.arrayOf(PropTypes.string).isRequired,\n    }),\n    listing_id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n  })).isRequired,\n  displayListing: PropTypes.func.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport './ListingInfo.css'\n\nconst ListingInfo = (props) => {\n    const images = props.listing.img.map(img => {\n        return <img \n        alt='' \n        className='listing-info-img'\n        key={img}\n        src={`/images/${img}`} />\n    })\n    const { \n        name, \n        address, \n        area, \n        listing_id, \n        details,\n        favorite\n    } = props.listing \n    const { \n        street, \n        zip \n    } = address\n    const { \n        baths, \n        beds, \n        cost_per_night, \n        superhost\n    } = details\n    \n    return (\n      <section>\n        <nav className='listing-info-nav'>\n          <button\n            className={favorite ? 'unfavorite-btn' : 'favorite-btn'}\n            onClick={() => props.addFavoriteListing(props.listing)}\n          >\n            {'\\u2764'} {favorite ? 'Remove from Favorites' : 'Add to Favorites'}\n          </button>\n          <Link to={`/areas/${area.replace(/\\s/g, '')}/listings`}>\n            <button className='back-listings-btn'>Back To Listings</button>\n          </Link>\n          <Link to='/areas'>\n            <button className='back-areas-btn'>Back To Areas</button>\n          </Link>\n        </nav>\n        <div className='listing-info-container'>\n          <div className='listing-info'>\n            <h2 className={favorite ? 'listing-info-name-favorite' : 'listing-info-name'}>\n              {favorite && '\\u2764 '}\n               {name}\n              {favorite && ' \\u2764'}\n            </h2>\n            <p className='listing-info-p'>\n              Area: <span className='info-accent'>{area}</span>\n            </p>\n            <p className='listing-info-p'>\n              Address:{' '}\n              <span className='info-accent'>{`${street}, ${zip}, Denver`}</span>\n            </p>\n            <p className='listing-info-p'>\n              Bath: <span className='info-accent'>{baths}</span>\n            </p>\n            <p className='listing-info-p'>\n              Beds: <span className='info-accent'>{beds}</span>\n            </p>\n            <p className='listing-info-p'>\n              <span className='info-accent'>${cost_per_night}</span> / night\n            </p>\n            <p className='listing-info-p'>\n              Superhost:{' '}\n              <span className='info-accent'>{superhost ? 'Yes' : 'No'}</span>\n            </p>\n            <p className='listing-info-p'>\n              Listing ID: <span className='info-accent'>{listing_id}</span>\n            </p>\n          </div>\n          <div className='slide-gallery'>\n            <figure className='slider'>{images}</figure>\n          </div>\n        </div>\n      </section>\n    )\n}\n\nexport default ListingInfo\n\nListingInfo.propTypes = {\n  listing: PropTypes.shape({\n    listing_id: PropTypes.number.isRequired,\n    area_id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    address: PropTypes.shape({\n      street: PropTypes.string.isRequired,\n      zip: PropTypes.number.isRequired,\n    }),\n    details: PropTypes.shape({\n      neighborhood_id: PropTypes.number.isRequired,\n      seller_source: PropTypes.string.isRequired,\n      superhost: PropTypes.bool.isRequired,\n      beds: PropTypes.number.isRequired,\n      baths: PropTypes.number.isRequired,\n      cost_per_night: PropTypes.number.isRequired,\n      features: PropTypes.arrayOf(PropTypes.string).isRequired,\n    }),\n    dev_id: PropTypes.string.isRequired,\n    area: PropTypes.string.isRequired,\n    favorite: PropTypes.bool.isRequired,\n    db_connect: PropTypes.number,\n  }).isRequired,\n  addFavoriteListing: PropTypes.func.isRequired\n}","const imageData = {\n    3: ['3_a.jpg', '3_b.jpg', '3_c.jpg'],\n    8: ['8_a.jpg', '8_b.jpg', '8_c.jpg'],\n    9: ['9_a.jpg', '9_b.jpg', '9_c.jpg'],\n    11: ['11_a.jpg', '11_b.jpg', '11_c.jpg'],\n    21: ['21_a.jpg', '21_b.jpg', '21_c.jpg'],\n    27: ['27_a.jpg', '27_b.jpg', '27_c.jpg'],\n    44: ['44_a.jpg', '44_b.jpg', '44_c.jpg'],\n    56: ['56_a.jpg', '56_b.jpg', '56_c.jpg'],\n    66: ['66_a.jpg', '66_b.jpg', '66_c.jpg'],\n    77: ['77_a.jpg', '77_b.jpg', '77_c.jpg'],\n    90: ['90_a.jpg', '90_b.jpg', '90_c.jpg'],\n    92: ['92_a.jpg', '92_b.jpg', '92_c.jpg'],\n    221: ['221_a.jpg', '221_b.jpg', '221_c.jpg'],\n    310: ['310_a.jpg', '310_b.jpg', '310_c.jpg'],\n    411: ['411_a.jpg', '411_b.jpg', '411_c.jpg'],\n    555: ['555_a.jpg', '555_b.jpg', '555_c.jpg'],\n    744: ['744_a.jpg', '744_b.jpg', '744_c.jpg'],\n    3921: ['3921_a.jpg', '3921_b.jpg', '3921_c.jpg'],\n    6135: ['6135_a.jpg', '6135_b.jpg', '6135_c.jpg'],\n    83331: ['83331_a.jpg', '83331_b.jpg', '83331_c.jpg']\n}\n\nexport default imageData","export const url = \"https://vrad-api.herokuapp.com\"","import imageData from '../imageData'\nimport { url } from '../utilsData'\n\nexport const fetchAreas = async () => {\n  try {\n    let areasData = []\n    const response = await fetch(url + '/api/v1/areas')\n    const areas = await response.json()\n    areas.areas.forEach(async (area) => {\n      const response2 = await fetch(url + area.details)\n      const areaDetails = await response2.json()\n      const areaObject = {\n        ...areaDetails,\n        area: area.area,\n      }\n      areasData.push(areaObject)\n    })\n    return areasData\n  } catch (err) {\n    console.log(err)\n  }\n}\n\nexport const fetchListings = async (listings) => {\n  const listingsPromises = listings.map((listing) => {\n    const images = Object.entries(imageData).find((item) => {\n      return (item[0] === listing.split('').splice(17).join('')) && item[1]\n    })\n    return fetch(url + listing)\n      .then((response) => response.json())\n      .then((listing) => {\n        return {\n          favorite: false,\n          ...listing,\n          img: images[1],\n        }\n      })\n  })\n  return Promise.all(listingsPromises)\n    .catch((err) => console.error(err))\n}","import React, { Component } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport './App.css'\nimport UserInfo from '../UserInfo/UserInfo'\nimport Covid19 from '../Covid19/Covid19'\nimport Header from '../Header/Header'\nimport Login from '../Login/Login'\nimport AreaContainer from '../AreaContainer/AreaContainer'\nimport ListingContainer from '../ListingContainer/ListingContainer'\nimport ListingInfo from '../ListingInfo/ListingInfo'\nimport { fetchAreas, fetchListings } from '../../ApiFetch/ApiFetch'\n\nexport default class App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      isLoggedIn: false,\n      username: '',\n      email: '',\n      usage: '',\n      favoriteListings: [],\n      areas: [],\n      listings: [],\n      listing: null,\n      error: null\n    }\n  }\n\n  componentDidMount = async () => {\n    const areasData = await fetchAreas()\n    areasData && this.setState({ areas: areasData }) \n    !areasData && this.setState({ error: 'Oops, loading failed! :(' })\n  }\n\n  displayListings = async (listings) => {\n    const listingsData = await fetchListings(listings)\n    listingsData && this.setState({ listings: listingsData }) \n    !listingsData && this.setState({ error: 'Oops, loading failed! :(' })\n  }\n\n  displayListing = (listing) => {\n    this.setState({\n      listing: listing\n    })\n  }\n\n  removeError = () => {\n    this.setState({\n      error: null\n    })\n  }\n\n  displayFavorites = (favoriteListings) => {}\n\n  checkLogin = (userInfo) => {\n    this.setState({\n      username: userInfo.username,\n      email: userInfo.email,\n      usage: userInfo.usage,\n      isLoggedIn: true,\n    })\n  }\n\n  logout = () => {\n    this.setState({\n      username: '',\n      email: '',\n      usage: '',\n      favoriteListings: [],\n      isLoggedIn: false,\n    })\n  }\n\n  addFavoriteListing = (listing) => {\n    const newFavoriteListings = this.state.favoriteListings.slice()\n    let foundListing = newFavoriteListings.find(\n      (fave) => fave.listing_id === listing.listing_id\n    )\n    if (!foundListing) {\n      listing.favorite = true\n      newFavoriteListings.push(listing)\n    } else {\n      listing.favorite = false\n      let index = newFavoriteListings.findIndex(\n        (i) => i.listing_id === listing.listing_id\n      )\n      newFavoriteListings.splice(index, 1)\n    }\n    this.setState({\n      favoriteListings: newFavoriteListings\n    })\n  }\n\n  render() {\n      const {\n        isLoggedIn,\n        listings,\n        listing,\n        username,\n        usage,\n        favoriteListings,\n        areas,\n        error\n      } = this.state\n\n    return (\n      <div>\n        <Covid19 />\n        <Header />\n        {isLoggedIn && (\n          <UserInfo\n            logout={this.logout}\n            username={username}\n            usage={usage}\n            favoriteListings={favoriteListings}\n          />\n        )}\n\n        {!isLoggedIn ? (\n          <Redirect to='/' />\n        ) : (\n          <Redirect to='/areas' />\n        )}\n        \n        <Route\n          path='/'\n          exact\n          render={() => {\n            return <Login checkLogin={this.checkLogin} />\n          }}\n        />\n        <Route\n          path='/areas'\n          exact\n          render={() => {\n            return (\n              <AreaContainer\n                error={error}\n                areas={areas}\n                displayListings={this.displayListings}\n              />\n            )\n          }}\n        />\n        <Route\n          path='/areas/:area/listings'\n          exact\n          render={() => {\n            return (\n              <ListingContainer\n                listings={listings}\n                displayListing={this.displayListing}\n                error={error}\n                removeError={this.removeError}\n              />\n            )\n          }}\n        />\n        <Route\n          path='/favorites'\n          exact\n          render={() => {\n            return (\n              <ListingContainer\n                listings={favoriteListings}\n                displayListing={this.displayListing}\n              />\n            )\n          }} \n        />\n        <Route\n          path='/areas/:listing_id/listings/:listing_id'\n          exact\n          render={() => {\n            return (\n              <ListingInfo\n                listing={listing}\n                addFavoriteListing={this.addFavoriteListing}\n              />\n            )\n          }}\n        />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App/App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister();\n"],"sourceRoot":""}